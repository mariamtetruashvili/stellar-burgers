// components/ProtectedRoute.tsx
import { FC } from 'react';
import { Navigate, useLocation } from 'react-router-dom';
import { useAppSelector } from '../services/store';

interface ProtectedRouteProps {
  children: React.ReactElement;
  onlyUnAuth?: boolean; // —Ä–µ–∂–∏–º "—Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö"
}

export const ProtectedRoute: FC<ProtectedRouteProps> = ({
  children,
  onlyUnAuth = false
}) => {
  const { user, isAuthChecked, loading } = useAppSelector((s) => s.auth);
  const location = useLocation();

  // –ü–æ–∫–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–∞–¥–µ—Ä
  if (!isAuthChecked && loading) return <div>Loading...</div>;

  const isLoggedIn = !!user;

  // üîí –ï—Å–ª–∏ –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω ‚Äî —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ /login
  if (!onlyUnAuth && !isLoggedIn) {
    return <Navigate to='/login' replace state={{ from: location }} />;
  }

  // üîì –ï—Å–ª–∏ —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –Ω–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –≥–æ—Å—Ç–µ–π ‚Äî —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ –≥–ª–∞–≤–Ω—É—é
  if (onlyUnAuth && isLoggedIn) {
    const from = (location.state as any)?.from || { pathname: '/' };
    return <Navigate to={from} replace />;
  }

  // ‚úÖ –ò–Ω–∞—á–µ ‚Äî —Ä–µ–Ω–¥–µ—Ä–∏–º –¥–æ—á–µ—Ä–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç
  return children;
};
